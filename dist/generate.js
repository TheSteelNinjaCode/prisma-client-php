import*as fs from"fs";import{exec}from"child_process";import path from"path";import CryptoJS from"crypto-js";import chalk from"chalk";import{getFileMeta}from"./utils.js";const{__dirname}=getFileMeta(),getSecretKey=()=>{const e=fs.readFileSync(`${__dirname}/key.enc`,"utf8");if(e.length<400)throw new Error("File content is less than 400 characters.");return e.substring(754,799)},decryptData=(e,r)=>CryptoJS.AES.decrypt(e,r).toString(CryptoJS.enc.Utf8),executePHP=e=>{exec(e,(e,r,t)=>{if(e)return t?.trim()&&console.error(t),void console.error(`Execution error: ${e.message}`);if(t?.trim()){const e=t.split(/\r?\n/).filter(e=>e.trim()&&!/Loaded Prisma config from/i.test(e)&&!/Prisma config detected, skipping environment variable loading/i.test(e)).join("\n");e&&console.warn(e)}r.includes("Result: Prisma schema is valid.")?console.log(chalk.blue(r)):r.trim()&&console.log(`Standard output...\n${r}`)})},main=async()=>{try{const e=process.cwd(),r=path.join(e,"prisma-php.json"),t=fs.readFileSync(r,{encoding:"utf8"}),n=JSON.parse(t),o=n.phpGenerateClassPath??"src/Lib/Prisma/Classes",i=`${__dirname}/index.php`,c=`${__dirname}/index.enc`,s=getSecretKey(),a=fs.readFileSync(c,{encoding:"utf8"}),l=decryptData(a,s);fs.writeFileSync(`${__dirname}/index.php`,l);const m=`${n.phpRootPathExe} ${i} ${o}`;console.log("Executing command...\n"),executePHP(m)}catch(e){console.error("Error in script execution:",e)}};main().catch(e=>{console.error("Unhandled error in main function:",e)});